package org.nbgames.yaya;

import java.awt.BorderLayout;
import java.util.Observable;
import java.util.Observer;
import org.nbgames.core.NbGames;
import org.nbgames.core.dice.DiceBoard;
import org.nbgames.core.dice.DiceBoard.RollEvent;
import org.nbgames.core.game.GamePanel;
import org.nbgames.yaya.scorecard.ScoreCard;
import org.nbgames.yaya.scorecard.ScoreCardObservable.ScoreCardEvent;

/**
 *
 * @author Patrik Karlsson <patrik@trixon.se>
 */
public class YayaPanel extends GamePanel implements Observer {

    private YayaController mGameController;
    private DiceBoard mDiceBoard;
    private boolean isRollable = true;
    private int numOfPlayers;
    private ScoreCard mScoreCard;

    /**
     * Creates new form YayaPanel
     */
    public YayaPanel() {
        initComponents();
        init();
    }

    public YayaPanel(YayaController gameController) {
        this();

        mGameController = gameController;
    }

    @Override
    public void update(Observable o, Object arg) {
        if (arg instanceof RollEvent) {
            switch ((RollEvent) arg) {
                case PRE_ROLL:
                    mScoreCard.setEnabledUndo(false);
                    isRollable = mScoreCard.isRollable();
                    if (isRollable) {
                        mScoreCard.newRoll();
                        mDiceBoard.roll();
                    }

                    break;

                case POST_ROLL:
                    mScoreCard.parseDice(mDiceBoard.getValues());
                    break;
            }
        }

        if (arg instanceof ScoreCardEvent) {
            switch ((ScoreCardEvent) arg) {
                case GAME_OVER:
                    mDiceBoard.gameOver();
                    break;

                case REGISTER:
                    mDiceBoard.newTurn();
                    break;

                case UNDO:
                    mDiceBoard.undo();
                    break;
            }
        }

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 400, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 300, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents

    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables
    void newGame() {
        NbGames.log("Yaya: startNewGame");
//        if (numOfPlayers != settings.getNumOfPlayers()) {
//            numOfPlayers = settings.getNumOfPlayers();
//            initRule(settings.getRule());
//        }
        initRule();
        mScoreCard.newGame();
        mDiceBoard.newTurn();
    }

    private void init() {
//        AAudioClip.setPlaySoundEffects(true);
        numOfPlayers = 4;//settings.getNumOfPlayers();
        setLayout(new BorderLayout());

//        addHierarchyBoundsListener(new HierarchyBoundsListener() {
//
//            @Override
//            public void ancestorMoved(HierarchyEvent evt) {
//            }
//
//            @Override
//            public void ancestorResized(HierarchyEvent evt) {
//                centerInParent();
//            }
//        });
    }

    private void initDiceBoard() {
        mDiceBoard.addObserver(this);
        mDiceBoard.setDiceTofloor(1000);
        mDiceBoard.setMaxRollCount(3);//settings.getRule().getNumOfRolls());
        add(mDiceBoard.getPanel(), BorderLayout.SOUTH);
    }

    private void initRule() {
        removeAll();
//        settings.setRule(aRule);

        mDiceBoard = new DiceBoard(5);//settings.getRule().getNumOfDice());
        mScoreCard = new ScoreCard();
        initScoreCard();
        initDiceBoard();

//        applyColors();
//        getParent().doLayout();
//        centerInParent();
//        Dimension d = getSize();
//        d = new Dimension(d.width + 40, d.height + 80);
//        getAApplicationFrame().setMinimumSize(d);
//        newGame();
    }

    private void initScoreCard() {
        mScoreCard.getObservable().addObserver(this);
        add(mScoreCard.getCard(), BorderLayout.CENTER);
    }

}
