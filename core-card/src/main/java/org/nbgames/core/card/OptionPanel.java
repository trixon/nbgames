/* 
 * Copyright 2017 Patrik Karlsson.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package org.nbgames.core.card;

import java.util.LinkedList;
import java.util.prefs.Preferences;
import org.nbgames.core.card.PlayingCard.Side;
import org.openide.util.NbPreferences;

/**
 *
 * @author Patrik Karlsson
 */
public final class OptionPanel extends javax.swing.JPanel {

    private final OptionPanelController mController;
    private final Preferences mPreferences = NbPreferences.forModule(OptionPanel.class);

    OptionPanel(OptionPanelController controller) {
        mController = controller;
        initComponents();
    }

    /**
     * This method is called from within the constructor to init the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        deck1Panel = new javax.swing.JPanel();
        front0DeckComboBox = new DeckComboBox(PlayingCard.Side.FRONT);
        back0DeckComboBox = new DeckComboBox(PlayingCard.Side.BACK);
        deck2Panel = new javax.swing.JPanel();
        front1DeckComboBox = new DeckComboBox(PlayingCard.Side.FRONT);
        back1DeckComboBox = new DeckComboBox(PlayingCard.Side.BACK);

        deck1Panel.setBorder(javax.swing.BorderFactory.createTitledBorder(org.openide.util.NbBundle.getMessage(OptionPanel.class, "OptionPanel.deck1Panel.border.title"))); // NOI18N
        deck1Panel.setLayout(new java.awt.GridLayout(0, 1, 10, 10));
        deck1Panel.add(front0DeckComboBox);
        deck1Panel.add(back0DeckComboBox);

        deck2Panel.setBorder(javax.swing.BorderFactory.createTitledBorder(org.openide.util.NbBundle.getMessage(OptionPanel.class, "OptionPanel.deck2Panel.border.title"))); // NOI18N
        deck2Panel.setLayout(new java.awt.GridLayout(0, 1, 10, 10));
        deck2Panel.add(front1DeckComboBox);
        deck2Panel.add(back1DeckComboBox);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(deck1Panel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(deck2Panel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(111, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(deck2Panel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(deck1Panel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    void load() {
        CardDeckManager.INSTANCE.init();
        ((DeckComboBox) front0DeckComboBox).reset();
        ((DeckComboBox) front1DeckComboBox).reset();
        ((DeckComboBox) back0DeckComboBox).reset();
        ((DeckComboBox) back1DeckComboBox).reset();

        String path;
        int index;

        path = mPreferences.get("back0", CardDeckManager.DEFAULT_PATH_BACK_0);
        index = getIndex(PlayingCard.Side.BACK, path, CardDeckManager.DEFAULT_PATH_BACK_0);
        back0DeckComboBox.setSelectedIndex(index);

        path = mPreferences.get("back1", CardDeckManager.DEFAULT_PATH_BACK_1);
        index = getIndex(PlayingCard.Side.BACK, path, CardDeckManager.DEFAULT_PATH_BACK_1);
        back1DeckComboBox.setSelectedIndex(index);

        path = mPreferences.get("front0", CardDeckManager.DEFAULT_PATH_FRONT_0);
        index = getIndex(PlayingCard.Side.FRONT, path, CardDeckManager.DEFAULT_PATH_FRONT_0);
        front0DeckComboBox.setSelectedIndex(index);

        path = mPreferences.get("front1", CardDeckManager.DEFAULT_PATH_FRONT_1);
        index = getIndex(PlayingCard.Side.FRONT, path, CardDeckManager.DEFAULT_PATH_FRONT_1);
        front1DeckComboBox.setSelectedIndex(index);
    }

    void store() {
        mPreferences.put("front0", CardDeckManager.INSTANCE.getFrontList().get(front0DeckComboBox.getSelectedIndex()));
        mPreferences.put("front1", CardDeckManager.INSTANCE.getFrontList().get(front1DeckComboBox.getSelectedIndex()));
        mPreferences.put("back0", CardDeckManager.INSTANCE.getBackList().get(back0DeckComboBox.getSelectedIndex()));
        mPreferences.put("back1", CardDeckManager.INSTANCE.getBackList().get(back1DeckComboBox.getSelectedIndex()));
    }

    boolean valid() {
        return true;
    }

    private int getIndex(Side side, String path, String defaultPath) {
        int result = -1;
        LinkedList<String> strings = new LinkedList<String>();
        if (side == Side.BACK) {
            strings.addAll(CardDeckManager.INSTANCE.getBackList());
        } else {
            strings.addAll(CardDeckManager.INSTANCE.getFrontList());
        }

        for (String string : strings) {
            if (string.equalsIgnoreCase(path)) {
                result = strings.indexOf(path);
                break;
            }
        }

        if (result == -1) {
            for (String string : strings) {
                if (string.equalsIgnoreCase(defaultPath)) {
                    result = strings.indexOf(defaultPath);
                    break;
                }
            }
        }

        result = Math.max(result, 0);

        return result;
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox back0DeckComboBox;
    private javax.swing.JComboBox back1DeckComboBox;
    private javax.swing.JPanel deck1Panel;
    private javax.swing.JPanel deck2Panel;
    private javax.swing.JComboBox front0DeckComboBox;
    private javax.swing.JComboBox front1DeckComboBox;
    // End of variables declaration//GEN-END:variables
}
