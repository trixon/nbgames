/*
 * Copyright 2017 Patrik Karlsson.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package org.nbgames.core;

import java.util.ArrayList;
import java.util.Arrays;
import javax.swing.DefaultComboBoxModel;
import javax.swing.SwingUtilities;
import javax.swing.UIManager;
import org.nbgames.core.api.NbGames;
import org.nbgames.core.api.ui.NbgOptionsPanel;
import org.openide.util.NbPreferences;
import se.trixon.almond.util.AlmondOptions;
import se.trixon.almond.util.Dict;

/**
 *
 * @author Patrik Karlsson
 */
public class SystemOptionsPanel extends NbgOptionsPanel {

    private final SystemOptions mOptions = SystemOptions.getInstance();
    private final AlmondOptions mAlmondOptions = NbGames.getAlmondOptions();
    private final ArrayList<UIManager.LookAndFeelInfo> mLookAndFeelInfos = new ArrayList<>(10);
    private int mDefaultLookAndFeelIndex;

    /**
     * Creates new form NbGamesOptionsPanel
     */
    public SystemOptionsPanel() {
        initComponents();
        init();
        load();
    }

    @Override
    public void load() {
        SwingUtilities.invokeLater(() -> {
            colorCheckBox.setSelected(mOptions.isCustomWindowBackground());
            lowerColorComboBox.setSelectedColor(mOptions.getColor(SystemOptions.ColorItem.WINDOW_LOWER));
            upperColorComboBox.setSelectedColor(mOptions.getColor(SystemOptions.ColorItem.WINDOW_UPPER));

            toolbarColorCheckBox.setSelected(mOptions.isCustomToolbarBackground());
            toolbarColorComboBox.setSelectedColor(mOptions.getColor(SystemOptions.ColorItem.TOOLBAR));

            iconsComboBox.setSelectedIndex(mAlmondOptions.getIconTheme());

            boolean isForcedLaF = isForcedLaF();
            mDefaultLookAndFeelIndex = mLookAndFeelInfos.indexOf(isForcedLaF ? getCurrentLaF() : getPreferredLaF());
            lafComboBox.setSelectedIndex(mDefaultLookAndFeelIndex);
            lafComboBox.setEnabled(!isForcedLaF);
        });
    }

    @Override
    public void save() {
    }

    private UIManager.LookAndFeelInfo getCurrentLaF() {
        UIManager.LookAndFeelInfo currentLaf = null;
        String currentLAFClassName = UIManager.getLookAndFeel().getClass().getName();
        boolean isAqua = "Aqua".equals(UIManager.getLookAndFeel().getID()); //NOI18N

        for (UIManager.LookAndFeelInfo li : mLookAndFeelInfos) {
            if (currentLAFClassName.equals(li.getClassName())
                    || (isAqua && li.getClassName().contains("apple.laf.AquaLookAndFeel"))) { //NOI18N
                currentLaf = li;
                break;
            }
        }

        return currentLaf;
    }

    private UIManager.LookAndFeelInfo getPreferredLaF() {
        String lafClassName = NbPreferences.root().node("laf").get("laf", null); //NOI18N

        if (null == lafClassName) {
            return getCurrentLaF();
        }

        UIManager.LookAndFeelInfo currentLaf = null;
        boolean isAqua = "Aqua".equals(UIManager.getLookAndFeel().getID()); //NOI18N

        for (UIManager.LookAndFeelInfo li : mLookAndFeelInfos) {
            if (lafClassName.equals(li.getClassName())
                    || (isAqua && li.getClassName().contains("apple.laf.AquaLookAndFeel"))) { //NOI18N
                currentLaf = li;
                break;
            }
        }

        return currentLaf;
    }

    private void init() {
        iconsComboBox.setModel(new DefaultComboBoxModel<>(new String[]{Dict.MATERIAL_BLACK.toString(), Dict.MATERIAL_WHITE.toString()}));

        initLookAndFeel();
        DefaultComboBoxModel model = new DefaultComboBoxModel();
        mLookAndFeelInfos.forEach((lookAndFeelInfo) -> {
            model.addElement(lookAndFeelInfo.getName());
        });

        lafComboBox.setModel(model);
    }

    private void initLookAndFeel() {
        mLookAndFeelInfos.clear();
        mLookAndFeelInfos.addAll(Arrays.asList(UIManager.getInstalledLookAndFeels()));
    }

    private boolean isForcedLaF() {
        return null != System.getProperty("nb.laf.forced"); //NOI18N
    }

    /**
     * This method is called from within the constructor to initialize the form. WARNING: Do NOT
     * modify this code. The content of this method is always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;
        bindingGroup = new org.jdesktop.beansbinding.BindingGroup();

        panel = new javax.swing.JPanel();
        colorCheckBox = new javax.swing.JCheckBox();
        upperLabel = new javax.swing.JLabel();
        lowerLabel = new javax.swing.JLabel();
        upperColorComboBox = new org.openide.awt.ColorComboBox();
        lowerColorComboBox = new org.openide.awt.ColorComboBox();
        toolbarColorCheckBox = new javax.swing.JCheckBox();
        toolbarColorComboBox = new org.openide.awt.ColorComboBox();
        iconsLabel = new javax.swing.JLabel();
        iconsComboBox = new javax.swing.JComboBox<>();
        jLabel1 = new javax.swing.JLabel();
        lafComboBox = new javax.swing.JComboBox<>();

        panel.setLayout(new java.awt.GridBagLayout());

        colorCheckBox.setText(org.openide.util.NbBundle.getMessage(SystemOptionsPanel.class, "SystemOptionsPanel.colorCheckBox.text")); // NOI18N
        colorCheckBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                colorCheckBoxActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        gridBagConstraints.insets = new java.awt.Insets(8, 8, 0, 8);
        panel.add(colorCheckBox, gridBagConstraints);

        upperLabel.setText(org.openide.util.NbBundle.getMessage(SystemOptionsPanel.class, "SystemOptionsPanel.upperLabel.text")); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        gridBagConstraints.insets = new java.awt.Insets(8, 8, 0, 8);
        panel.add(upperLabel, gridBagConstraints);

        lowerLabel.setText(org.openide.util.NbBundle.getMessage(SystemOptionsPanel.class, "SystemOptionsPanel.lowerLabel.text")); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        gridBagConstraints.insets = new java.awt.Insets(8, 8, 0, 8);
        panel.add(lowerLabel, gridBagConstraints);

        org.jdesktop.beansbinding.Binding binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, colorCheckBox, org.jdesktop.beansbinding.ELProperty.create("${selected}"), upperColorComboBox, org.jdesktop.beansbinding.BeanProperty.create("enabled"));
        bindingGroup.addBinding(binding);

        upperColorComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                upperColorComboBoxActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        gridBagConstraints.insets = new java.awt.Insets(0, 8, 0, 8);
        panel.add(upperColorComboBox, gridBagConstraints);

        binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, colorCheckBox, org.jdesktop.beansbinding.ELProperty.create("${selected}"), lowerColorComboBox, org.jdesktop.beansbinding.BeanProperty.create("enabled"));
        bindingGroup.addBinding(binding);

        lowerColorComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                lowerColorComboBoxActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        gridBagConstraints.insets = new java.awt.Insets(0, 8, 0, 8);
        panel.add(lowerColorComboBox, gridBagConstraints);

        toolbarColorCheckBox.setText(org.openide.util.NbBundle.getMessage(SystemOptionsPanel.class, "SystemOptionsPanel.toolbarColorCheckBox.text")); // NOI18N
        toolbarColorCheckBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                toolbarColorCheckBoxActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        gridBagConstraints.insets = new java.awt.Insets(8, 8, 0, 0);
        panel.add(toolbarColorCheckBox, gridBagConstraints);

        binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, toolbarColorCheckBox, org.jdesktop.beansbinding.ELProperty.create("${selected}"), toolbarColorComboBox, org.jdesktop.beansbinding.BeanProperty.create("enabled"));
        bindingGroup.addBinding(binding);

        toolbarColorComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                toolbarColorComboBoxActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 6;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(0, 8, 0, 8);
        panel.add(toolbarColorComboBox, gridBagConstraints);

        iconsLabel.setText(Dict.ICONS.toString());
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 9;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        gridBagConstraints.insets = new java.awt.Insets(8, 8, 0, 8);
        panel.add(iconsLabel, gridBagConstraints);

        iconsComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                iconsComboBoxActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 10;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        gridBagConstraints.insets = new java.awt.Insets(0, 8, 0, 8);
        panel.add(iconsComboBox, gridBagConstraints);

        jLabel1.setText(Dict.LOOK_AND_FEEL.toString());
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 7;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        gridBagConstraints.insets = new java.awt.Insets(8, 8, 0, 8);
        panel.add(jLabel1, gridBagConstraints);

        lafComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                lafComboBoxActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 8;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        gridBagConstraints.insets = new java.awt.Insets(0, 8, 0, 8);
        panel.add(lafComboBox, gridBagConstraints);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(panel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(panel, javax.swing.GroupLayout.PREFERRED_SIZE, 346, Short.MAX_VALUE)
                .addGap(28, 28, 28))
        );

        bindingGroup.bind();
    }// </editor-fold>//GEN-END:initComponents

    private void colorCheckBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_colorCheckBoxActionPerformed
        mOptions.setCustomWindowBackground(colorCheckBox.isSelected());
    }//GEN-LAST:event_colorCheckBoxActionPerformed

    private void upperColorComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_upperColorComboBoxActionPerformed
        mOptions.setColor(SystemOptions.ColorItem.WINDOW_UPPER, upperColorComboBox.getSelectedColor());
    }//GEN-LAST:event_upperColorComboBoxActionPerformed

    private void lowerColorComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_lowerColorComboBoxActionPerformed
        mOptions.setColor(SystemOptions.ColorItem.WINDOW_LOWER, lowerColorComboBox.getSelectedColor());
    }//GEN-LAST:event_lowerColorComboBoxActionPerformed

    private void toolbarColorComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_toolbarColorComboBoxActionPerformed
        mOptions.setColor(SystemOptions.ColorItem.TOOLBAR, toolbarColorComboBox.getSelectedColor());
    }//GEN-LAST:event_toolbarColorComboBoxActionPerformed

    private void toolbarColorCheckBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_toolbarColorCheckBoxActionPerformed
        mOptions.setCustomToolbarBackground(toolbarColorCheckBox.isSelected());
    }//GEN-LAST:event_toolbarColorCheckBoxActionPerformed

    private void iconsComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_iconsComboBoxActionPerformed
        mAlmondOptions.setIconTheme(iconsComboBox.getSelectedIndex());
    }//GEN-LAST:event_iconsComboBoxActionPerformed

    private void lafComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_lafComboBoxActionPerformed
        int selLaFIndex = lafComboBox.getSelectedIndex();
        if (selLaFIndex != mDefaultLookAndFeelIndex && !isForcedLaF()) {
            UIManager.LookAndFeelInfo li = mLookAndFeelInfos.get(lafComboBox.getSelectedIndex());
            NbPreferences.root().node("laf").put("laf", li.getClassName()); //NOI18N
            //askForRestart();
        }
    }//GEN-LAST:event_lafComboBoxActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JCheckBox colorCheckBox;
    private javax.swing.JComboBox<String> iconsComboBox;
    private javax.swing.JLabel iconsLabel;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JComboBox<String> lafComboBox;
    private org.openide.awt.ColorComboBox lowerColorComboBox;
    private javax.swing.JLabel lowerLabel;
    private javax.swing.JPanel panel;
    private javax.swing.JCheckBox toolbarColorCheckBox;
    private org.openide.awt.ColorComboBox toolbarColorComboBox;
    private org.openide.awt.ColorComboBox upperColorComboBox;
    private javax.swing.JLabel upperLabel;
    private org.jdesktop.beansbinding.BindingGroup bindingGroup;
    // End of variables declaration//GEN-END:variables
}
