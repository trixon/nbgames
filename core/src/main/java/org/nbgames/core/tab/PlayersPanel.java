/*
 * Copyright 2016 Patrik Karlsson.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package org.nbgames.core.tab;

import java.awt.event.MouseEvent;
import java.util.Arrays;
import javax.swing.DefaultListModel;
import javax.swing.JButton;
import javax.swing.event.ListDataEvent;
import javax.swing.event.ListDataListener;
import org.nbgames.core.DictNbg;
import org.nbgames.core.Player;
import org.nbgames.core.PlayerManager;
import org.openide.DialogDescriptor;
import org.openide.DialogDisplayer;
import org.openide.NotifyDescriptor;
import org.openide.util.NbBundle;
import se.trixon.almond.nbp.Almond;
import se.trixon.almond.util.AlmondOptions;
import se.trixon.almond.util.icons.IconColor;
import se.trixon.almond.util.icons.material.MaterialIcon;

/**
 *
 * @author Patrik Karlsson <patrik@trixon.se>
 */
public final class PlayersPanel extends javax.swing.JPanel {

    private DefaultListModel mModel = new DefaultListModel();
    private final IconColor mIconColor = AlmondOptions.getInstance().getIconColor();

    public PlayersPanel() {
        initComponents();
        init();
        load();
    }

    private void init() {
        int iconSize = (int) (Almond.ICON_LARGE / 1.5);
        addButton.setIcon(MaterialIcon._Content.ADD.get(iconSize, mIconColor));
        editButton.setIcon(MaterialIcon._Content.CREATE.get(iconSize, mIconColor));
        removeButton.setIcon(MaterialIcon._Content.REMOVE.get(iconSize, mIconColor));
        removeAllButton.setIcon(MaterialIcon._Content.CLEAR.get(iconSize, mIconColor));
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        toolBar = new javax.swing.JToolBar();
        filler2 = new javax.swing.Box.Filler(new java.awt.Dimension(8, 0), new java.awt.Dimension(8, 0), new java.awt.Dimension(8, 32767));
        jLabel1 = new javax.swing.JLabel();
        filler1 = new javax.swing.Box.Filler(new java.awt.Dimension(0, 0), new java.awt.Dimension(0, 0), new java.awt.Dimension(32767, 0));
        addButton = new javax.swing.JButton();
        editButton = new javax.swing.JButton();
        removeButton = new javax.swing.JButton();
        removeAllButton = new javax.swing.JButton();
        scrollPane = new javax.swing.JScrollPane();
        list = new javax.swing.JList();

        setPreferredSize(new java.awt.Dimension(360, 280));

        toolBar.setFloatable(false);
        toolBar.setRollover(true);
        toolBar.add(filler2);

        jLabel1.setFont(jLabel1.getFont().deriveFont(jLabel1.getFont().getSize()+4f));
        org.openide.awt.Mnemonics.setLocalizedText(jLabel1, DictNbg.PLAYERS.toString());
        toolBar.add(jLabel1);
        toolBar.add(filler1);

        addButton.setToolTipText(org.openide.util.NbBundle.getMessage(PlayersPanel.class, "PlayersDialog.title.add")); // NOI18N
        addButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addButtonActionPerformed(evt);
            }
        });
        toolBar.add(addButton);

        editButton.setToolTipText(org.openide.util.NbBundle.getMessage(PlayersPanel.class, "PlayersDialog.title.edit")); // NOI18N
        editButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                editButtonActionPerformed(evt);
            }
        });
        toolBar.add(editButton);

        removeButton.setToolTipText(org.openide.util.NbBundle.getMessage(PlayersPanel.class, "PlayersDialog.title.remove")); // NOI18N
        removeButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                removeButtonActionPerformed(evt);
            }
        });
        toolBar.add(removeButton);

        removeAllButton.setToolTipText(org.openide.util.NbBundle.getMessage(PlayersPanel.class, "PlayersDialog.title.removeAll")); // NOI18N
        removeAllButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                removeAllButtonActionPerformed(evt);
            }
        });
        toolBar.add(removeAllButton);

        list.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        list.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                listMouseClicked(evt);
            }
        });
        scrollPane.setViewportView(list);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(toolBar, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(scrollPane)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(toolBar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(scrollPane))
        );
    }// </editor-fold>//GEN-END:initComponents

    private boolean isValidPlayer(Player player) {
        return !player.getName().isEmpty();
    }

    private void removeButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_removeButtonActionPerformed
        if (getSelectedPlayer() != null) {
            NotifyDescriptor d = new NotifyDescriptor(
                    NbBundle.getMessage(PlayersPanel.class, "PlayersDialog.message.remove", getSelectedPlayer().getName()),
                    NbBundle.getMessage(PlayersPanel.class, "PlayersDialog.title.remove"),
                    NotifyDescriptor.OK_CANCEL_OPTION,
                    NotifyDescriptor.WARNING_MESSAGE,
                    null,
                    null);
            Object retval = DialogDisplayer.getDefault().notify(d);

            if (retval == NotifyDescriptor.OK_OPTION) {
                mModel.removeElement(getSelectedPlayer());
            }
        }
    }//GEN-LAST:event_removeButtonActionPerformed

    private void removeAllButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_removeAllButtonActionPerformed
        if (!mModel.isEmpty()) {
            NotifyDescriptor d = new NotifyDescriptor(
                    NbBundle.getMessage(PlayersPanel.class, "PlayersDialog.message.removeAll"),
                    NbBundle.getMessage(PlayersPanel.class, "PlayersDialog.title.removeAll"),
                    NotifyDescriptor.OK_CANCEL_OPTION,
                    NotifyDescriptor.WARNING_MESSAGE,
                    null,
                    null);
            Object retval = DialogDisplayer.getDefault().notify(d);

            if (retval == NotifyDescriptor.OK_OPTION) {
                mModel.removeAllElements();
            }
        }
    }//GEN-LAST:event_removeAllButtonActionPerformed

    private void addButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addButtonActionPerformed
        PlayerPanel playerPanel = new PlayerPanel();
        playerPanel.setPlayer(new Player());
        DialogDescriptor d = new DialogDescriptor(playerPanel, NbBundle.getMessage(PlayersPanel.class, "PlayersDialog.title.add"));
        Object retval = DialogDisplayer.getDefault().notify(d);

        if (retval == NotifyDescriptor.OK_OPTION) {
            if (isValidPlayer(playerPanel.getPlayer())) {
                mModel.addElement(playerPanel.getPlayer());
                sortModel();
            } else {
                showInvalidPlayerDialog();
            }
        }
    }//GEN-LAST:event_addButtonActionPerformed

    private void editButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_editButtonActionPerformed
        if (getSelectedPlayer() != null) {
            PlayerPanel playerPanel = new PlayerPanel();
            playerPanel.setPlayer(getSelectedPlayer());
            DialogDescriptor d = new DialogDescriptor(playerPanel, NbBundle.getMessage(PlayersPanel.class, "PlayersDialog.title.edit"));
            Object retval = DialogDisplayer.getDefault().notify(d);

            if (retval == NotifyDescriptor.OK_OPTION) {
                if (isValidPlayer(playerPanel.getPlayer())) {
                    mModel.set(mModel.indexOf(getSelectedPlayer()), playerPanel.getPlayer());
                    sortModel();
                } else {
                    showInvalidPlayerDialog();
                }
            }
        }
    }//GEN-LAST:event_editButtonActionPerformed

    private void showInvalidPlayerDialog() {
        NotifyDescriptor d = new NotifyDescriptor(
                NbBundle.getMessage(PlayersPanel.class, "PlayersDialog.message.invalidPlayer"),
                NbBundle.getMessage(PlayersPanel.class, "PlayersDialog.title.invalidInput"),
                NotifyDescriptor.ERROR_MESSAGE,
                NotifyDescriptor.ERROR_MESSAGE,
                new JButton[]{new JButton("Ok")},
                null);
        DialogDisplayer.getDefault().notify(d);
    }

    private void sortModel() {
        Object[] players = mModel.toArray();
        Arrays.sort(players);
        mModel.clear();

        for (Object object : players) {
            mModel.addElement(object);
        }
    }
    private void listMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_listMouseClicked
        if (evt.getButton() == MouseEvent.BUTTON1 && evt.getClickCount() == 2) {
            editButtonActionPerformed(null);
        }
    }//GEN-LAST:event_listMouseClicked

    private Player getSelectedPlayer() {
        return (Player) list.getSelectedValue();
    }

    private void load() {
        mModel = PlayerManager.INSTANCE.load(mModel);
        mModel.addListDataListener(new ListDataListener() {

            @Override
            public void contentsChanged(ListDataEvent e) {
                store();
            }

            @Override
            public void intervalAdded(ListDataEvent e) {
                store();
            }

            @Override
            public void intervalRemoved(ListDataEvent e) {
                store();
            }
        });

        list.setModel(mModel);
    }

    private void store() {
        PlayerManager.INSTANCE.store(mModel);
    }

    boolean valid() {
        return true;
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton addButton;
    private javax.swing.JButton editButton;
    private javax.swing.Box.Filler filler1;
    private javax.swing.Box.Filler filler2;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JList list;
    private javax.swing.JButton removeAllButton;
    private javax.swing.JButton removeButton;
    private javax.swing.JScrollPane scrollPane;
    private javax.swing.JToolBar toolBar;
    // End of variables declaration//GEN-END:variables
}
